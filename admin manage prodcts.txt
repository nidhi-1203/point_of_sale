package pos_online;
import javax.swing.*;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import java.io.File;
import java.awt.event.*;
import java.sql.*;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;


public class admin_manage_product extends JFrame implements ActionListener {
	JLabel lb1,lb2,lb3,lb4,lb5,lb6 ;
	JTextField tf1,tf2;
	JTextArea ta1;
	JButton bt1,bt2,bt3 ;
	JComboBox cb1,cb2;
	JScrollPane sp1,sp2;
	JTable jt;
	
	JFileChooser jfc = new JFileChooser();
    File f;
    String file_path = "";
    
    ArrayList<product_details> al = new ArrayList<>();
     mymodel obj_mymodel;
     

	admin_manage_product()
	{
		setLayout(null);
		
		lb1= new JLabel("category ");
		lb2= new JLabel("product name ");
		lb3= new JLabel("description ");
		lb4= new JLabel("price ");
		lb5= new JLabel("photo ");
		lb6 = new JLabel("...");
		jt = new JTable();
		tf1 = new JTextField();
		tf2 = new JTextField();
		bt1 = new JButton(" choose file ");
		bt2 = new JButton("submit ");
		bt3 = new JButton("search ");
		ta1 = new JTextArea();
		sp1= new JScrollPane();
	    sp2 = new JScrollPane();
	    obj_mymodel = new mymodel();
        jt.setModel(obj_mymodel);
		String category[] = {"item 1","item 2","item 3"};
		cb1 = new JComboBox<>(category);
	    cb2 = new JComboBox<>();
	    
		cb1.removeAllItems();
		cb2.removeAllItems();
		
		for(int i = 0;i<global_class.category1.length;i++)
		{
			cb1.addItem(global_class.category1[i]);
			cb2.addItem(global_class.category1[i]);
		}
		
		lb1.setBounds(100,100,150,30);
		lb2.setBounds(100,150,150,30);
		lb3.setBounds(100,200,150,30);
		lb4.setBounds(100,250,150,30);
		lb5.setBounds(100,300,150,30);
		lb6.setBounds(300,300,400,400);
		tf1.setBounds(300,150,150,30);
		tf2.setBounds(300,250,150,30);
		bt1.setBounds(700,300,150,30);
		bt2.setBounds(300,350,150,30);
		ta1.setBounds(300,200,400,400);
		cb1.setBounds(300,100,150,30);
		cb2.setBounds(800,100,150,30);
		bt3.setBounds(1000,100,150,30);
		jt.setBounds(800,200,500,1000);
		add(lb1);
		add(lb2);
		add(lb3);
		add(lb4);
		add(lb5);
		add(lb6);
		add(tf1);
		add(tf2);
		add(bt1);
		add(bt2);
		add(ta1);
		add(cb1);
		add(sp1);
		add(sp2);
		add(jt);
        bt1.addActionListener(this);
        bt2.addActionListener(this);
		
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setTitle("admin manage product");
		setSize(1400,1400);
		setVisible(true);
	}
	@Override
	public void actionPerformed(ActionEvent e)
	{
		if(e.getSource()==bt1)
		{
			 int ans = jfc.showOpenDialog(this);
		        if (ans == JFileChooser.APPROVE_OPTION) {
		            f = jfc.getSelectedFile();
		            file_path = f.getAbsolutePath();
		            lb6.setText(file_path);
		}
		}
		        else if(e.getSource()==bt2)
		        {
		        	String category = cb1.getSelectedItem().toString();
		            String p_name = tf1.getText().toString();
		            String p_desc = ta1.getText().toString();

		            int price = Integer.parseInt(tf2.getText().toString());
		            
		            if(category.equals("")|| p_name.equals("")|| p_desc.equals(""))
		            {
		            	JOptionPane.showMessageDialog(this, "All fields are required");
		            }
		            
		            try {

		                ResultSet rs = DBLoader.executeQuery("select * from products where product_name='" + p_name + "' and category='" + category + "'");

		                if (rs.next()) {
		                    JOptionPane.showMessageDialog(this, "Product Alredy Exists");

		                } else {

		                    String img_path = global_class.savefile(file_path);

		                    // INsert
		                    rs.moveToInsertRow();
		                    rs.updateString("product_name", p_name);

		                    rs.updateString("description", p_desc);

		                    rs.updateInt("price", price);

		                    rs.updateString("photo", img_path);
		                    rs.updateString("category", category);
		                    rs.insertRow();
		                    JOptionPane.showMessageDialog(this, "Product Added.");
		                    fetch_products(category);
		                }

		            } catch (Exception ex) {
		                ex.printStackTrace();
		            }

		            

		        }
		        else if(e.getSource()==bt3) {
		        	String category2 = cb2.getSelectedItem().toString();

		            fetch_products(category2);

		        }
		}
	
		public static void main(String args[])
		{
			
		}
		public void fetch_products(String categoryname) {
	        al.clear();
	        try {
	            ResultSet rs = DBLoader.executeQuery("select * from products where category='" + categoryname + "'");
	            while (rs.next()) {
	                int pid = rs.getInt("pid");
	                String p_name = rs.getString("product_name");
	                String desc = rs.getString("description");
	                int price = rs.getInt("price");
	                String photo = rs.getString("photo");
	                String category = rs.getString("category");

	                product_details obj = new product_details(pid, price, p_name, desc, photo, category);
	                al.add(obj);
	            }
	            obj_mymodel.fireTableDataChanged();

	            System.out.println("Size == " + al.size());

	        } catch (Exception e) {
	            e.printStackTrace();
	        }
	    }

		class mymodel extends AbstractTableModel {

	        @Override
	        public int getRowCount() {
//	            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

	            return al.size();
	        }

	        @Override
	        public int getColumnCount() {
//	            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	            return 6;
	        }
	        
	        @Override
	        public Object getValueAt(int rowIndex, int columnIndex) {
//	            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

	            if (columnIndex == 0) {
	                return al.get(rowIndex).pid;
	            }
	            else  if (columnIndex == 1) {
	                return al.get(rowIndex).p_name;
	            }
	            else  if (columnIndex == 2) {
	                return al.get(rowIndex).desc;
	            }
	            else  if (columnIndex == 3) {
	                return al.get(rowIndex).price;
	            }
	            else  if (columnIndex == 4) {
	                return al.get(rowIndex).photo;
	            }
	            else  if (columnIndex == 5) {
	                return al.get(rowIndex).category;
	            }
	            else {
	                return "Something";
	            }

}
	        @Override
	        public String getColumnName(int column) {
	            String arr[] = {"PID", "Product Name", "Description", "Price", "Photo", "Category"};
	            return arr[column]; 
	        }


}
		
		
}